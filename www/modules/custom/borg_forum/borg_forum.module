<?php
/**
 * @file
 * Provides additional functions for Backdrop.org discussion forum.
 */

/**
 * Implements hook_autoload_info().
 */
function borg_forum_autoload_info() {
  return array(
    'taxonomy_term_data_handler_field_last_comment' => 'views/taxonomy_term_data_handler_field_last_comment.inc',
  );
}

/**
 * Implements hook_views_api().
 */
function borg_forum_views_api() {
  return array(
    'api' => 3,
    'path' => backdrop_get_path('module', 'borg_forum') . '/views',
  );
}

/**
 * Implements hook_config_info().
 */
function borg_forum_config_info() {
  $prefixes['borg_forum.settings'] = array(
    'label' => t('Borg forum settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Stores last comment timestamps.
 */
function borg_forum_last_comment_timestamp($tid) {
  $cache = &backdrop_static(__FUNCTION__);
  if (isset($cache[$tid])) {
    return $cache[$tid];
  }

  $results = db_query('SELECT t.tid AS tid, nc.last_comment_timestamp AS last_comment_timestamp FROM {taxonomy_index} t LEFT JOIN {node_comment_statistics} nc ON t.nid = nc.nid')->fetchAll();

  foreach ($results as $result) {
    $cache[$result->tid] = (isset($result->last_comment_timestamp)) ? $result->last_comment_timestamp : NULL;
  }

  return isset($cache[$tid]) ? $cache[$tid] : '';
}

/**
 * Implements hook_node_view().
 */
function borg_forum_node_view(Node $node, $view_mode, $langcode) {
  if ($node->type == 'forum_topic') {
    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), NULL);
    $breadcrumb[] = l(t('Forum'), 'forums');
    $field_forums = field_get_items('node', $node, 'field_forums');
    if ($field_forums) {
      $data = reset($field_forums);
      $data = taxonomy_term_load($data['tid']);
      $breadcrumb[] = l($data->name, $data->path['alias']);
    }
    backdrop_set_breadcrumb($breadcrumb);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function borg_forum_views_pre_render(&$view) {
  if ($view->name == 'taxonomy_term') {
    $parents = taxonomy_term_load_parents_all($view->args[0]);
    unset($parents[0]);
    $parents = array_reverse($parents);

    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), NULL);
    $breadcrumb[] = l(t('Forum'), 'forums');
    if ($parents) {
      foreach ($parents as $parent) {
        $breadcrumb[] = l($parent->name, 'forums/' . $parent->tid);
      }
    }
    backdrop_set_breadcrumb($breadcrumb);
  }
  if ($view->name == 'categories') {
    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), NULL);
    backdrop_set_breadcrumb($breadcrumb);
  }
}

/**
 * Implements hook_block_info().
 */
function borg_forum_block_info() {
  $blocks['branding'] = array(
    'info' => t('Branding'),
    'description' => t('Backdrop CMS logomark and wordmark.'),
  );
  $blocks['new_forum_button'] = array(
    'info' => t('New forum button'),
    'description' => t('New forum button.'),
  );
  $blocks['comment_form_block'] = array(
    'info' => t('Comment form block'),
    'description' => t('Comment form block.'),
  );

  return $blocks;
}

/**
 * Implements function hook_block_view().
 */
function borg_forum_block_view($delta = '', $settings = array(), $contexts = array()) {
  $block = array();

  switch ($delta) {
  case 'branding':
    $options = array('attributes' => array('class' => array('site-name')));
    $output = l(t('forum'), '', $options);

    $uri = backdrop_get_path('module', 'borg_forum') . '/images/logo.png';
    $image = theme('image', array('uri' => $uri, 'alt' => t('Backdrop CMS Logo')));
    $options = array('html' => TRUE, 'attributes' => array('class' => array('logo'), 'title' => t('Backdrop CMS Forum')));
    $output .= l($image, '', $options);

    $block['subject'] = NULL;
    $block['content'] = $output;
    break;

  case 'new_forum_button':
    // This block will be available on taxonomy term pages (forum categories)
    // and also on node pages (forum topics) so we get the $tid to pass it to
    // the link.
    $tid = NULL;
    if ($item = menu_get_item()) {
      if (isset($item['path']) && $item['path'] == 'taxonomy/term/%') {
        $tid = $item['map'][2];
      }
      elseif ($node = menu_get_object()) {
        if (isset($node->type) && $node->type == 'forum_topic') {
          $forum_field = field_get_items('node', $node, 'field_forums');
          if ($forum_field) {
            $reset = reset($forum_field);
            $tid = $reset['tid'];
          }
        }
      }
    }
    $add_link = 'node/add/forum-topic/' . $tid;
    $destination = array('destination' => $add_link);


    if (user_is_logged_in()) {
      $link = l(t('New Forum Topic'), $add_link, array('attributes' => array('class' => array('button'))));
      $output = '<div class ="new-topic"><span>' . $link . '</span></div>';
    }
    else {
      $link = t('<a href="@login">Log in</a> or <a href="@register">register</a> to add new topics', array('@login' => url('user/login', array('query' => $destination)), '@register' => url('user/register', array('query' => $destination))));
      $output = '<div class ="forum-forbidden"><span>' . $link . '</span></div>';
    }

    $block['subject'] = NULL;
    $block['content'] = $output;
    break;

  case 'comment_form_block':
    if ($node = menu_get_object()) {
      // Make sure comments aren't closed.
      if (($node->comment !== 0) && (arg(2) == NULL)) {
        // Render the comments and comment form (access checks, etc. are done
        // by comment_node_page_additions()).
        $block['subject'] = t('Comments');
        $comments = borg_forum_commentsblock_static_comments($node->nid, FALSE, $node);
        $block['content'] = backdrop_render($comments);
      }
    }
    break;
  }

  return $block;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 */
function borg_forum_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Set the forum for the topic.
  if (isset($form['field_forums'])) {
    $langcode = $form['field_forums']['#language'];
    // Make the vocabulary required for 'real' forum-nodes.
    $form['field_forums'][$langcode]['#required'] = TRUE;
    $form['field_forums'][$langcode]['#multiple'] = FALSE;
    if (empty($form['field_forums'][$langcode]['#default_value'])) {
      // If there is no default forum already selected, try to get the forum
      // ID from the URL (e.g., if we are on a page like node/add/forum/2, we
      // expect "2" to be the ID of the forum that was requested).
      $requested_forum_id = arg(3);
      $form['field_forums'][$langcode]['#default_value'] = is_numeric($requested_forum_id) ? $requested_forum_id : '';
    }
  }

  if ($form_id == 'forum_topic_node_form') {
    // Prevent authenticated users from deleting their own forum topics if there
    // are comments attached.
    if (user_access('delete own forum_topic content') && !user_access('delete any forum_topic content')) {
      if ($form['#entity']->comment_count > 0) {
        unset($form['actions']['delete']);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_delete_confirm().
 */
function borg_forum_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
  // Prevent authenticated users from accessing this form (and thereby deleting
  // their own forum topics) if there are comments attached.
  if (user_access('delete own forum_topic content') && !user_access('delete any forum_topic content')) {
    if ($form['#node']->comment_count > 0) {
      $form['#access'] = FALSE;
      backdrop_set_title(t('Access denied'));
    }
  }
}

/**
 * Implements hook_comment_view_alter().
 *
 * This will make room for your custom comment view or block by removing the regular
 * comment listing from the node body.
 *
 * @todo the unset is not a good solution? maybe difficulties with other modules?
 */
function borg_forum_node_view_alter(&$build) {
  borg_forum_commentsblock_static_comments($build['#node']->nid, $build, $build['#node']);
  $node = menu_get_object();
  unset($node->comments);
}

/**
 * For sake of performance, save comments in a static variable.
 */
function borg_forum_commentsblock_static_comments($nid, $build, $node = false) {
  $comments = &backdrop_static(__FUNCTION__);

  if (isset($build['comments'])) {
    $comments[$nid]['comments'] = $build['comments'];
  } else {
    if (!isset($comments[$nid])) {
      $comments[$nid]['comments'] = borg_comment_node_page_additions($node);
    }

    return $comments[$nid];
  }
}

/**
 * Copy of core comment_node_page_additions() to select the correct
 * pager.
 */
function borg_comment_node_page_additions(Node $node) {
  $node_type = node_type_get_type($node->type);

  $additions = array(
    'comments' => array(),
    'comment_form' => array(),
  );

  // Only attempt to render comments if the node has visible comments.
  // Unpublished comments are not included in $node->comment_count, so show
  // comments unconditionally if the user is an administrator.
  if ((!empty($node->comment_count) && user_access('access comments')) || user_access('administer comments')) {
    $mode = $node_type->settings['comment_mode'];
    $comments_per_page = $node_type->settings['comment_per_page'];
    if ($cids = comment_get_thread($node, $mode, $comments_per_page)) {
      $comments = comment_load_multiple($cids);
      comment_prepare_thread($comments);
      $build = comment_view_multiple($comments, $node);
      $build['pager']['#theme'] = 'pager';
      $build['pager']['#element'] = 1;
      $additions['comments'] = $build;
    }
  }

  // Append comment form if needed.
  $menu = menu_get_item();

  // @todo find a better way to ignore these callbacks.
  $ignored_callbacks = array(
    'comment_edit_page',
    'comment_reply'
  );
  if (user_access('post comments') && $node->comment == COMMENT_NODE_OPEN
    && ($node_type->settings['comment_form_location'] == COMMENT_FORM_BELOW)
    && !in_array($menu['page_callback'], $ignored_callbacks)) {

    $comment = entity_create('comment', array('nid' => $node->nid));
    $additions['comment_form'] = backdrop_get_form("comment_node_{$node->type}_form", $comment);
  }

  return $additions;
}

/**
 * Implements hook_menu_alter().
 */
function borg_forum_menu_alter(&$items) {
  $items['comment/%']['page callback'] = 'borg_forum_comment_permalink';
}

/**
 * Menu callback override for permalink 'comment/%' paths.
 *
 * Core permalink implementations call comment_permalink() which in turn invokes
 * menu_default_route_handler(), which renders the node without the layout
 * system, which breaks display of the forum comments block.
 */
function borg_forum_comment_permalink($cid) {
  if (($comment = comment_load($cid)) && ($node = node_load($comment->nid))) {
    // Find the current display page for this comment.
    $page = comment_get_display_page($comment->cid, $node->type);

    // Redirect using the correct pager ID and the selected comment anchor.
    $options = array(
      'query' => array('page' => '0,' . $page),
      'fragment' => 'comment-' . $comment->cid,
    );

    backdrop_goto('node/' . $node->nid, $options);
  }
  return MENU_NOT_FOUND;
}


