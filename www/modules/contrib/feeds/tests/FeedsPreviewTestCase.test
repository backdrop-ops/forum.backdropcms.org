<?php

/**
 * @file
 * Contains FeedsPreviewTestCase.
 */

include_once __DIR__ . '/feeds.test';

/**
 * Base class for FeedsPreview tests.
 */
abstract class FeedsPreviewTestCase extends FeedsWebTestCase {
  /**
   * {@inheritdoc}
   */
  public function setUp($modules = array()) {
    parent::setUp($modules);

    // Include FeedsProcessor.inc so processor related constants are available.
    module_load_include('inc', 'feeds', 'plugins/FeedsProcessor');
  }

  /**
   * Preview the import of a file using the file fetcher.
   *
   * @param string $path
   *   The path to submit to.
   * @param string $file
   *   (optional) The path to the file to upload.
   * @param array $edit
   *   (optional) Additional values to fill in on the form.
   * @param string $submit
   *   (optional) The name of the button.
   *   Defaults to "Preview".
   */
  protected function previewImportFile($path, $file = NULL, $edit = array(), $submit = 'Preview') {
    if (is_null($file)) {
      $file = $this->absolutePath() . '/tests/resources/preview/content.csv';
    }

    $this->assertTrue(file_exists($file), format_string('Source file @file exists', array(
      '@file' => $file,
    )));
    $edit += array(
      'files[feeds]' => $file,
    );
    $this->backdropPost($path, $edit, $submit);

    // Assert that a preview is shown.
    $this->assertRaw('feeds-preview-table');
  }

  /**
   * Preview the import of an url using the http fetcher.
   *
   * @param string $path
   *   The path to submit to.
   * @param string $url
   *   (optional) The url to preview.
   * @param array $edit
   *   (optional) Additional values to fill in on the form.
   * @param string $submit
   *   (optional) The name of the button.
   *   Defaults to "Preview".
   */
  protected function previewImportUrl($path, $url = NULL, $edit = array(), $submit = 'Preview') {
    if (is_null($url)) {
      $url = $GLOBALS['base_url'] . '/' . backdrop_get_path('module', 'feeds') . '/tests/resources/preview/content.csv';
    }

    $edit += array(
      'feeds[FeedsHTTPFetcher][source]' => $url,
    );
    $this->backdropPost($path, $edit, $submit);

    // Assert that a preview is shown.
    $this->assertRaw('feeds-preview-table');
  }

  /**
   * Asserts number of nodes.
   */
  public function assertNodeCount($expected, $message = NULL) {
    if (is_null($message)) {
      $message = 'There are @expected nodes (actual: @actual).';
    }

    $actual = db_select('node')
      ->fields('node', array('nid'))
      ->countQuery()
      ->execute()
      ->fetchField();

    $message = format_string($message, array(
      '@expected' => $expected,
      '@actual' => $actual,
    ));

    $this->assertEqual($expected, $actual, $message);
  }
}
